@*@model XMLDocumentLibrary.Models.XMLDoc*@
@model XMLDocuments.App.Models.XML.XMLViewModel
@{
    ViewData["Title"] = "XML View";
}

<!-- Button trigger modal -->
@*<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#helpModal">Show help</button>*@

<div style="text-align: right;">
    <a href="" data-bs-toggle="modal" data-bs-target="#helpModal" style="text-align: right;">Help</a>
</div>


<!-- Modal -->
<div class="modal fade" id="helpModal" tabindex="-1" aria-labelledby="helpModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Help</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ol>
                    <li>Select title of the book and confirm that.</li>
                    <li>Select a function which you want to apply. <small class="text-muted">(Some of them require additional informations, such as attribut name, value etc.).</small></li>
                    <li>
                        Write Path to the element that you want to process in convetion: 
                        <code>root/child/child</code>.<br />If you want to specify the a particular item, use <code>[]</code> like: <code>root/child[1]/child</code>. Remember that indexing is from 1, not from 0.
                    </li>
                    <li>If you want to start searching not from root element, use <code>//</code> at the beginning of path. For example: <code>//node/child</code></li>.
                    <li>You can mix all of this functions and create complex paths!</li>
                    <li>At the end click the "Execute" button, to process XML document.</li>
                </ol>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Got it!</button>
            </div>
        </div>
    </div>
</div>

<form asp-action="XMLView" class="col-sm-3 mt-3" method="post">
    <select asp-for="XMLDocumentId" asp-items="@ViewBag.XMLDocuments" class="form-control"></select>
    <button class="btn btn-success">Apply</button>
</form>


@if (Model is not null)
{
    <div class="row">
        <div class="col-md-5">
            <pre>
@Model.XMLDocumentContent
                </pre>
        </div>
        <div class="col-md-3">
            <form asp-action="XMLView" method="post" autocomplete="off">
                <input asp-for="XMLDocumentId" type="hidden" value="@Model.XMLDocumentId" />

                <select asp-for="SelectedFunction" asp-items="@ViewBag.FunctionsList" class="form-control"></select>

                <input asp-for="XQuery" type="text" class="form-control" placeholder="Path" />

                <input asp-for="AttributeName" type="text" style="display: none;" class="form-control" placeholder="Attribute name" />
                <input asp-for="AttributeValue" type="text" style="display: none;" class="form-control" placeholder="Attribute value" />

                <button class="btn btn-primary mt-3">Execute</button>
            </form>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    @Model.SelectedFunction ():<br />
                    @Model.XQuery
                </div>
            </div>
            <pre>
@Model.Results
                </pre>
        </div>
    </div>
}